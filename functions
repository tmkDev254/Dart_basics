Section 2: Functions
Functions are blocks of code that perform a specific task.

2.1 Function Declaration
Syntax:

Dart

returnType functionName(parameter1, parameter2) {
  // body of the function
  return value; // if returnType is not void
}
void: Indicates that the function does not return any value.

Dart

void greet(String name) {
  print('Hello, $name!');
}
Return Type: If a function returns a value, its return type must match.

Dart

int add(int a, int b) {
  return a + b;
}
Arrow Functions (Fat Arrow =>): For functions that contain a single expression. Implicitly returns the result of the expression.

Dart

int multiply(int a, int b) => a * b;
void printMessage() => print('This is a short message.');
2.2 Parameters
Required Positional Parameters: The most common type. Must be provided in the correct order.

Dart

void describePerson(String name, int age) {
  print('$name is $age years old.');
}
Optional Positional Parameters: Enclosed in square brackets []. Can be omitted.

Dart

void sayHi(String name, [String? greeting]) {
  print('${greeting ?? "Hi"}, $name!');
}
sayHi('Alice'); // Hi, Alice!
sayHi('Bob', 'Hello'); // Hello, Bob!
Named Parameters: Enclosed in curly braces {}. Provide more flexibility and readability. Order doesn't matter.

Dart

void configure(
    {required String title, String color = 'blue', double? width}) {
  print('Title: $title, Color: $color, Width: ${width ?? 'auto'}');
}
configure(title: 'App', color: 'red'); // Order doesn't matter
configure(title: 'Settings', width: 200); // Use default color
required keyword: Makes a named parameter mandatory.

Default Values: Can be provided for optional named/positional parameters.

2.3 First-Class Functions
Functions are objects in Dart and can be passed as arguments, assigned to variables, and returned from other functions.

Assign to variable:

Dart

Function addNumbers = (int a, int b) => a + b;
print(addNumbers(5, 3)); // Output: 8
Pass as argument (Callbacks): Essential for Flutter (e.g., onPressed for Button).

Dart

void executeOperation(int a, int b, Function operation) {
  print(operation(a, b));
}
executeOperation(10, 5, (x, y) => x * y); // Output: 50
2.4 Anonymous Functions (Lambdas)
Functions without a name. Often used as callbacks.

Dart

List<int> numbers = [1, 2, 3];
numbers.forEach((number) { // Anonymous function as an argument
  print(number * 2);
});
// Output:
// 2
// 4
// 6
